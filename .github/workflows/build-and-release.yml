name: Build and Release VisionOps

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 1.0.0)'
        required: false
        default: ''

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: 'VisionOps.sln'
  BUILD_CONFIGURATION: 'Release'

jobs:
  build-and-test:
    runs-on: windows-latest

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Determine version
      id: version
      shell: pwsh
      run: |
        if ("${{ github.event.inputs.release_version }}" -ne "") {
          $version = "${{ github.event.inputs.release_version }}"
        } elseif ($env:GITHUB_REF -match '^refs/tags/v(.+)$') {
          $version = $matches[1]
        } else {
          $version = "1.0.0-dev.${{ github.run_number }}"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: Build
      run: dotnet build ${{ env.SOLUTION_FILE }} -c ${{ env.BUILD_CONFIGURATION }} --no-restore -p:Version=${{ steps.version.outputs.version }}

    - name: Run Phase 0 tests
      run: dotnet test src/VisionOps.Tests/VisionOps.Tests.csproj -c ${{ env.BUILD_CONFIGURATION }} --no-build --filter "Category=Phase0" --logger "trx;LogFileName=phase0-test-results.trx"

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: '**/*.trx'

  create-installer:
    needs: build-and-test
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup WiX Toolset
      run: |
        dotnet tool install -g wix
        wix extension add WixToolset.UI.wixext
        wix extension add WixToolset.Util.wixext
        wix extension add WixToolset.Firewall.wixext

    - name: Publish Service
      run: |
        dotnet publish src/VisionOps.Service/VisionOps.Service.csproj `
          -c ${{ env.BUILD_CONFIGURATION }} `
          -r win-x64 `
          --self-contained `
          -p:PublishSingleFile=false `
          -p:Version=${{ needs.build-and-test.outputs.version }} `
          -o artifacts/Service

    - name: Publish UI
      run: |
        dotnet publish src/VisionOps.UI/VisionOps.UI.csproj `
          -c ${{ env.BUILD_CONFIGURATION }} `
          -r win-x64 `
          --self-contained `
          -p:PublishSingleFile=false `
          -p:Version=${{ needs.build-and-test.outputs.version }} `
          -o artifacts/UI

    - name: Download AI Models (if available)
      continue-on-error: true
      run: |
        # Download models from release assets or CDN
        # For now, create placeholder
        New-Item -ItemType Directory -Force -Path artifacts/models
        echo "Models will be downloaded separately" > artifacts/models/README.txt

    - name: Build MSI Installer
      run: |
        cd tools/VisionOps.Installer
        wix build `
          -d ArtifactsPath="../../artifacts" `
          -d ProductVersion="${{ needs.build-and-test.outputs.version }}" `
          -arch x64 `
          -o ../../VisionOps-${{ needs.build-and-test.outputs.version }}.msi `
          Product.wxs

    - name: Create Velopack Release
      run: |
        # Install Velopack CLI
        dotnet tool install -g Velopack

        # Create Velopack package
        vpk pack `
          --packId VisionOps `
          --packVersion ${{ needs.build-and-test.outputs.version }} `
          --packDir artifacts/UI `
          --mainExe VisionOps.UI.exe `
          --outputDir velopack-releases `
          --channel stable

    - name: Create Portable ZIP
      run: |
        Compress-Archive -Path artifacts/* -DestinationPath VisionOps-${{ needs.build-and-test.outputs.version }}-portable.zip

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: installers
        path: |
          VisionOps-*.msi
          VisionOps-*.zip
          velopack-releases/*

  create-release:
    needs: [build-and-test, create-installer]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.release_version != ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: installers
        path: release-assets

    - name: Generate Release Notes
      id: release_notes
      run: |
        cat << EOF > RELEASE_NOTES.md
        # VisionOps v${{ needs.build-and-test.outputs.version }}

        ## ðŸŽ¯ Release Highlights

        ### Phase 0: Production Hardening Complete
        - âœ… Memory leak prevention with FFmpeg process isolation
        - âœ… Thermal management with proactive throttling at 70Â°C
        - âœ… Service stability with watchdog and daily restart
        - âœ… ONNX runtime optimization with shared sessions

        ### What's Included
        - **VisionOps Service**: 24/7 Windows Service for video analytics
        - **Configuration UI**: Manage cameras and settings
        - **Auto-Updates**: Automatic updates via Velopack
        - **Production Ready**: Hardened for 24/7 operation

        ### System Requirements
        - Windows 10/11 (64-bit)
        - .NET 8 Runtime
        - Intel i3+ CPU (4+ cores)
        - 8GB RAM minimum
        - 256GB SSD

        ### Installation
        1. Download the MSI installer below
        2. Run as Administrator
        3. Launch VisionOps Configuration from Start Menu
        4. Configure cameras and Supabase settings
        5. Start the service

        ### Known Issues
        - Camera auto-discovery coming in next release
        - AI models need to be downloaded separately
        - UI features are minimal (by design for Phase 0)

        ### Next Release
        - Camera auto-discovery (ONVIF)
        - YOLOv8 object detection
        - Florence-2 scene descriptions
        - Enhanced UI features

        ---
        *Built with production hardening from day one*
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build-and-test.outputs.version }}
        name: VisionOps v${{ needs.build-and-test.outputs.version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(needs.build-and-test.outputs.version, '-') }}
        files: |
          release-assets/VisionOps-*.msi
          release-assets/VisionOps-*.zip
          release-assets/velopack-releases/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-update-feed:
    needs: [create-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Update Velopack feed
      run: |
        echo "Velopack updates are automatically available via GitHub Releases"
        echo "Clients will check: https://github.com/${{ github.repository }}/releases"

    - name: Notify deployment
      run: |
        echo "ðŸš€ VisionOps v${{ needs.build-and-test.outputs.version }} has been released!"
        echo "MSI installer and auto-updates are now available."